%Jason's notes:
%Call the function with the image file name you want as the argument
%
%For this type of program, ALL variables are stored under 'handles'
%
%The output arguments are:
%   varargout{1} the Gauss filter sigma value
%   varargout{2} the strel disk radius value
%   varargout{3} either "gauss" or "strel" indicating which was first in the
%       filter order
%
%
%A lot of this structure is generated by the GUI creation.


function varargout = FilteringGUI(varargin)
% FILTERINGGUI MATLAB code for FilteringGUI.fig
%      FILTERINGGUI, by itself, creates a new FILTERINGGUI or raises the existing
%      singleton*.
%
%      H = FILTERINGGUI returns the handle to a new FILTERINGGUI or the handle to
%      the existing singleton*.
%
%      FILTERINGGUI('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in FILTERINGGUI.M with the given input arguments.
%
%      FILTERINGGUI('Property','Value',...) creates a new FILTERINGGUI or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before FilteringGUI_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to FilteringGUI_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help FilteringGUI

% Last Modified by GUIDE v2.5 19-Mar-2019 14:29:40

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @FilteringGUI_OpeningFcn, ...
                   'gui_OutputFcn',  @FilteringGUI_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT







% --- Executes just before FilteringGUI is made visible.
function FilteringGUI_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to FilteringGUI (see VARARGIN)

% Choose default command line output for FilteringGUI
handles.output = hObject;

%load, flatten the images
imagefilename = varargin{1};
ImageFile = load(imagefilename);
handles.ImageOriginal = ImageFile.Spatial.TopoData{1};
handles.OriginalFlat = FlatteningImage(handles.ImageOriginal);
handles.ImageUpdated = handles.ImageOriginal;
handles.UpdatedFlat = handles.OriginalFlat;

%find the parameters to display the image better
image_mean = mean2(handles.OriginalFlat);
image_std = std2(handles.OriginalFlat);
image_min = image_mean - 5*image_std;
image_max = image_mean + 5*image_std;

%display the images
axes(handles.OriginalImage); %changes the active axes
imshow(handles.OriginalFlat,[image_min image_max]) %plot
axes(handles.UpdatedImage);
imshow(handles.UpdatedFlat,[image_min image_max])


%find the minimum resolution (height or width) of the image
if ImageFile.Spatial.points < ImageFile.Spatial.lines
    min_resolution = ImageFile.Spatial.points;
elseif ImageFile.Spatial.points > ImageFile.Spatial.lines
    min_resolution = ImageFile.Spatial.lines;
else
    min_resolution = ImageFile.Spatial.lines;
end

%set the slider limits and starting values
handles.StrelSlider.Min = 1;
handles.StrelSlider.Max = round(min_resolution/5);
handles.StrelSlider.SliderStep = [1, 1] / (handles.StrelSlider.Max - 1);
handles.StrelSlider.Value = handles.StrelSlider.Max;
handles.StrelText.String = num2str(handles.StrelSlider.Max);

%set the starting Gaussian values
handles.GaussText.String = '1';
handles.GaussSlider.Min = 1;
handles.GaussSlider.Max = round(min_resolution/5);
handles.GaussSlider.SliderStep = [1, 1] / (handles.GaussSlider.Max - 1);
handles.GaussSlider.Value = 1;

%set the starting Lower bound values
handles.LowText.String = '1';
handles.LowSlider.Min = 1;
handles.LowSlider.Max = round(min_resolution/10);
handles.LowSlider.SliderStep = [.1, .1] / (handles.LowSlider.Max - 1);
handles.LowSlider.Value = 1;

%set the starting Higher bound values
handles.HighText.String = '1';
handles.HighSlider.Min = 1;
handles.HighSlider.Max = round(min_resolution/10);
handles.HighSlider.SliderStep = [.1, .1] / (handles.HighSlider.Max - 1);
handles.HighSlider.Value = 1;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes FilteringGUI wait for user response (see UIRESUME)
% uiwait(handles.figure1);











% --- Executes on slider movement.
function GaussSlider_Callback(hObject, eventdata, handles)
% hObject    handle to GaussSlider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

handles.GaussText.String = num2str(handles.GaussSlider.Value);


if handles.StrelFirstButton.Value == 1;
    Background = imopen(handles.OriginalFlat,strel('disk',round(handles.StrelSlider.Value))); 
    Background = imgaussfilt(Background,handles.GaussSlider.Value);
    handles.UpdatedFlat = handles.OriginalFlat - Background; 
else
    Background = imgaussfilt(handles.OriginalFlat,handles.GaussSlider.Value); 
    Background = imopen(Background,strel('disk',round(handles.StrelSlider.Value))); 
    handles.UpdatedFlat = handles.OriginalFlat - Background; 
end



image_mean = mean2(handles.UpdatedFlat);
image_std = std2(handles.UpdatedFlat);
image_min = image_mean - 5*image_std;
image_max = image_mean + 5*image_std;

axes(handles.UpdatedImage);
imshow(handles.UpdatedFlat,[image_min image_max])

% Update handles structure
guidata(hObject, handles);




% --- Executes during object creation, after setting all properties.
function GaussSlider_CreateFcn(hObject, eventdata, handles)
% hObject    handle to GaussSlider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end






% --- Executes on slider movement.
function StrelSlider_Callback(hObject, eventdata, handles)
% hObject    handle to StrelSlider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

handles.StrelText.String = num2str(handles.StrelSlider.Value);

if handles.StrelFirstButton.Value == 1;
    Background = imopen(handles.OriginalFlat,strel('disk',round(handles.StrelSlider.Value))); 
    Background = imgaussfilt(Background,handles.GaussSlider.Value);
    handles.UpdatedFlat = handles.OriginalFlat - Background; 
else
    Background = imgaussfilt(handles.OriginalFlat,handles.GaussSlider.Value); 
    Background = imopen(Background,strel('disk',round(handles.StrelSlider.Value))); 
    handles.UpdatedFlat = handles.OriginalFlat - Background; 
end
image_mean = mean2(handles.UpdatedFlat);
image_std = std2(handles.UpdatedFlat);
image_min = image_mean - 5*image_std;
image_max = image_mean + 5*image_std;

axes(handles.UpdatedImage);
imshow(handles.UpdatedFlat,[image_min image_max])

% Update handles structure
guidata(hObject, handles);





% --- Executes during object creation, after setting all properties.
function StrelSlider_CreateFcn(hObject, eventdata, handles)
% hObject    handle to StrelSlider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end




function FlattenedImage = FlatteningImage(Im_data)
    % Line-by-line flattening of the image:

for n=1:length(Im_data(:,1)) %assumes square?
%create an array of x-data 
    x = 1:length(Im_data(n,:)); 
   % extract the y data from row n 
   y = Im_data(n,:); 
   %fit this data with a linear fit:
   p = polyfit(x,y,1); 
   linecorrect = x.*p(1)+p(2); 
   Im_data_flat_lin(n,:)=Im_data(n,:)-linecorrect; 
end


FlattenedImage = Im_data_flat_lin;


% --- Executes on key press with focus on StrelFirstButton and none of its controls.
function StrelFirstButton_KeyPressFcn(hObject, eventdata, handles)
% hObject    handle to StrelFirstButton (see GCBO)
% eventdata  structure with the following fields (see MATLAB.UI.CONTROL.UICONTROL)
%	Key: name of the key that was pressed, in lower case
%	Character: character interpretation of the key(s) that was pressed
%	Modifier: name(s) of the modifier key(s) (i.e., control, shift) pressed
% handles    structure with handles and user data (see GUIDATA)

if handles.StrelFirstButton.Value == 1;
    Background = imopen(handles.OriginalFlat,strel('disk',round(handles.StrelSlider.Value))); 
    Background = imgaussfilt(Background,handles.GaussSlider.Value);
    handles.UpdatedFlat = handles.OriginalFlat - Background; 
else
    Background = imgaussfilt(handles.OriginalFlat,handles.GaussSlider.Value); 
    Background = imopen(Background,strel('disk',round(handles.StrelSlider.Value))); 
    handles.UpdatedFlat = handles.OriginalFlat - Background; 
end
image_mean = mean2(handles.UpdatedFlat);
image_std = std2(handles.UpdatedFlat);
image_min = image_mean - 5*image_std;
image_max = image_mean + 5*image_std;

axes(handles.UpdatedImage);
imshow(handles.UpdatedFlat,[image_min image_max])

% Update handles structure
guidata(hObject, handles);


% --- Executes on key press with focus on GaussFirstButton and none of its controls.
function GaussFirstButton_KeyPressFcn(hObject, eventdata, handles)
% hObject    handle to GaussFirstButton (see GCBO)
% eventdata  structure with the following fields (see MATLAB.UI.CONTROL.UICONTROL)
%	Key: name of the key that was pressed, in lower case
%	Character: character interpretation of the key(s) that was pressed
%	Modifier: name(s) of the modifier key(s) (i.e., control, shift) pressed
% handles    structure with handles and user data (see GUIDATA)

if handles.StrelFirstButton.Value == 1;
    Background = imopen(handles.OriginalFlat,strel('disk',round(handles.StrelSlider.Value))); 
    Background = imgaussfilt(Background,handles.GaussSlider.Value);
    handles.UpdatedFlat = handles.OriginalFlat - Background; 
else
    Background = imgaussfilt(handles.OriginalFlat,handles.GaussSlider.Value); 
    Background = imopen(Background,strel('disk',round(handles.StrelSlider.Value))); 
    handles.UpdatedFlat = handles.OriginalFlat - Background; 
end
image_mean = mean2(handles.UpdatedFlat);
image_std = std2(handles.UpdatedFlat);
image_min = image_mean - 5*image_std;
image_max = image_mean + 5*image_std;

axes(handles.UpdatedImage);
imshow(handles.UpdatedFlat,[image_min image_max])

% Update handles structure
guidata(hObject, handles);



% --- Executes when selected object is changed in OrderSelection.
function OrderSelection_SelectionChangedFcn(hObject, eventdata, handles)
% hObject    handle to the selected object in OrderSelection 
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
if handles.StrelFirstButton.Value == 1;
    Background = imopen(handles.OriginalFlat,strel('disk',round(handles.StrelSlider.Value))); 
    Background = imgaussfilt(Background,handles.GaussSlider.Value);
    handles.UpdatedFlat = handles.OriginalFlat - Background; 
else
    Background = imgaussfilt(handles.OriginalFlat,handles.GaussSlider.Value); 
    Background = imopen(Background,strel('disk',round(handles.StrelSlider.Value))); 
    handles.UpdatedFlat = handles.OriginalFlat - Background; 
end
image_mean = mean2(handles.UpdatedFlat);
image_std = std2(handles.UpdatedFlat);
image_min = image_mean - 5*image_std;
image_max = image_mean + 5*image_std;

axes(handles.UpdatedImage);
imshow(handles.UpdatedFlat,[image_min image_max])

% Update handles structure
guidata(hObject, handles);


% --- Executes on slider movement.
function LowSlider_Callback(hObject, eventdata, handles)
% hObject    handle to LowSlider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

handles.LowText.String = num2str(handles.LowSlider.Value);

nmL = handles.LowSlider.Value;
nmH = handles.HighSlider.Value;

% generate vector of image data
ImFlat = handles.UpdatedFlat;
ImFlatVec = ImFlat(:);
pixDiff = [];
nd = length(ImFlatVec);
ImVecSort = sort(ImFlatVec);

bmod = mod(nd,2);
if bmod ~= 0 
    nde = (nd+1)/2;
else
    nde = nd/2;
end

% run through vector and compute the brightness difference between each
% pixel and its nearest neigbhor
for i = 1:nd-1
    pixDiff(i) = abs(ImFlatVec(i+1) - ImFlatVec(i)); % subtract the brightness of one pixel from its linear neighbor
end

avgDiff = mean(pixDiff);
meanPix = mean(ImFlatVec);

pix2 = ImVecSort(nde);
pix1 = pix2;

lower = pix1 - avgDiff * nmL;
upper = pix2 + avgDiff * nmH;

ImLowUpdate = handles.UpdatedFlat;

for k = 1:numel(ImLowUpdate)   
    if (lower <= ImLowUpdate(k)) && (ImLowUpdate(k) <= upper)
        ImLowUpdate(k) = meanPix;
    end
end

handles.UpdatedLow = ImLowUpdate;

image_mean = mean2(handles.UpdatedLow);
image_std = std2(handles.UpdatedLow);
image_min = image_mean - 5*image_std;
image_max = image_mean + 5*image_std;

axes(handles.UpdatedImage);
imshow(handles.UpdatedLow,[image_min image_max])

% Update handles structure
guidata(hObject, handles);




% --- Executes during object creation, after setting all properties.
function LowSlider_CreateFcn(hObject, eventdata, handles)
% hObject    handle to LowSlider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end

% --- Executes on slider movement.
function HighSlider_Callback(hObject, eventdata, handles)
% hObject    handle to HighSlider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider

handles.HighText.String = num2str(handles.HighSlider.Value);

nmH = handles.HighSlider.Value;
nmL = handles.LowSlider.Value;

% generate vector of image data
ImFlat = handles.UpdatedFlat;
ImFlatVec = ImFlat(:);
pixDiff = [];
nd = length(ImFlatVec);
ImVecSort = sort(ImFlatVec);

bmod = mod(nd,2);
if bmod ~= 0 
    nde = (nd+1)/2;
else
    nde = nd/2;
end

pix2 = ImVecSort(nde);
pix1 = pix2;

% run through vector and compute the brightness difference between each
% pixel and its nearest neigbhor
for i = 1:nd-1
    pixDiff(i) = abs(ImFlatVec(i+1) - ImFlatVec(i)); % subtract the brightness of one pixel from its linear neighbor
end

avgDiff = mean(pixDiff);
meanPix = mean(ImFlatVec);

lower = pix1 - avgDiff * nmL;
upper = pix2 + avgDiff * nmH;

ImHighUpdate = handles.UpdatedFlat;

for k = 1:numel(ImHighUpdate)   
    if (lower <= ImHighUpdate(k)) && (ImHighUpdate(k) <= upper)
        ImHighUpdate(k) = meanPix;
    end
end

handles.UpdatedHigh = ImHighUpdate;

image_mean = mean2(handles.UpdatedHigh);
image_std = std2(handles.UpdatedHigh);
image_min = image_mean - 5*image_std;
image_max = image_mean + 5*image_std;

axes(handles.UpdatedImage);
imshow(handles.UpdatedHigh,[image_min image_max])

% Update handles structure
guidata(hObject, handles);


% --- Executes during object creation, after setting all properties.
function HighSlider_CreateFcn(hObject, eventdata, handles)
% hObject    handle to HighSlider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end


% --- Outputs from this function are returned to the command line.
function varargout = FilteringGUI_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure

varargout{1} = handles.output;


% --- Executes on button press in FinishedButton.
function FinishedButton_Callback(hObject, eventdata, handles)
% hObject    handle to FinishedButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

varargout{1} = handles.GaussSlider.Value;
varargout{2} = handles.StrelSlider.Value;
varargout{4} = handles.LowSlider.Value;
varargout{5} = handles.HighSlider.Value;
varargout{6} = handles.UpdatedHigh;

if handles.StrelFirstButton.Value == 1
    varargout{3} = "strel"
else
    varargout{3} = "gauss"
end

close;
